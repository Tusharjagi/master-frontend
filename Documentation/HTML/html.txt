HTML Cheat Sheet & Performance Guide

1. Doctype
<!DOCTYPE html>
- Declares the document type.
- Ensures the browser renders the page in HTML5 standards mode.
- Without it, browsers may use quirks mode, causing inconsistent rendering.

------------------------------------------------------------

2. Meta Tags
- Provide metadata about a webpage.
- Always used inside <head>.
Examples:
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Webpage description">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta property="og:title" content="My Blog Post">
  <meta name="twitter:card" content="summary_large_image">

------------------------------------------------------------

3. Tags vs Elements
- Tag: Markup keyword inside angle brackets.
  Opening: <p>, Closing: </p>, Self-closing: <br>, <img>, <hr>, <input>
- Element: Complete structure → <p>Hello</p>

------------------------------------------------------------

4. Attributes
- Extra info applied to tags.
Example:
  <img src="demo.jpg" alt="image" height="200">

------------------------------------------------------------

5. Common Tags
- Headings: h1 → h6
- Paragraph: p
- Lists: ol, ul, li, dl, dt, dd
- Breaks: br, hr
- Links: <a>, <link>
- Media: <img>, <audio>, <video>
- Tables: <table>, <tr>, <th>, <td>
- Forms: <form>, <input>, <label>, <button>, etc.

------------------------------------------------------------

6. Semantic Tags
<header>, <footer>, <main>, <section>, <article>, <aside>, <nav>,
<figure>, <figcaption>, <time>, <mark>, <address>

------------------------------------------------------------

7. Forms & inputs
<input type="text">, <input type="email">, <input type="password">
<textarea>, <select>, <option>, <button>, <fieldset>, <legend>
  Forms & Validation
    novalidate, required, pattern, type="email/number/url".
    Constraint validation API (checkValidity(), reportValidity()).
    Custom validation with setCustomValidity.

------------------------------------------------------------

8. Accessibility (A11y)
- Use alt on images
- Associate labels with inputs
- Maintain heading order
- Provide keyboard navigation
- Roles and ARIA when needed
- Color contrast ≥ 4.5:1

  4 principles: POUR:
    Perceivable -> Text alternatives for images (alt), captions for videos  
    Operable -> Keyboard navigation, clear focus states (tabindex="0" & tabindex="-1" {programmatic focus})
    Understandable -> Clear labels, consistent navigation
    Robust -> Proper semantic HTML, ARIA attributes

  ARIA (Accessible Rich Internet Applications)
    Describe the purpose of elements to assistive tech.

    Custom button with role="button" and aria-pressed.
    Custom checkbox with role="checkbox" and aria-checked.
    Accordion / collapsible section with aria-expanded and aria-controls.
    Tabs with role="tablist", role="tab", role="tabpanel", aria-selected, aria-controls.
    Live region / alert with role="alert".
    Slider with role="slider", aria-valuemin, aria-valuemax, aria-valuenow, keyboard control.  

------------------------------------------------------------

9. Shadow DOM
Encapsulation for styles & DOM:
<div id="host"></div>
<script>
  const host = document.getElementById('host');
  const shadow = host.attachShadow({ mode: 'open' });
  shadow.innerHTML = `<p>Shadow content</p>`;
</script>

------------------------------------------------------------

10. ContentEditable
<div contenteditable="true">Edit me!</div>

Example code editors in the browsers

------------------------------------------------------------

11. Drag & Drop API
<div draggable="true" id="dragMe">Drag me</div>
<script>
  const drag = document.getElementById('dragMe');
  drag.addEventListener('dragstart', e => {
    e.dataTransfer.setData('text/plain', 'dragging');
  });
</script>

------------------------------------------------------------

12. Microdata & Structured Data
<div itemscope itemtype="http://schema.org/Person">
  <span itemprop="name">John Doe</span>
  <span itemprop="jobTitle">Frontend Developer</span>
</div>

------------------------------------------------------------

13. Performance Optimization

Critical Rendering Path:
1. Parse HTML → DOM
2. Parse CSS → CSSOM
3. Combine → Render Tree
4. Layout (Reflow)
5. Paint (Repaint)

Script Loading:
- <script>: blocks parsing
- <script async>: loads parallel, executes when ready
- <script defer>: loads parallel, executes after parsing

Resource Loading:
  <link rel="preload" href="styles.css" as="style">
  <link rel="prefetch" href="next-page.html">
  <link rel="dns-prefetch" href="//example.com">
  <link rel="preconnect" href="https://fonts.googleapis.com">

Images & Media:
- Responsive images (srcset, sizes)
- Lazy loading: <img loading="lazy">
- Use WebP/AVIF formats

Rendering & SEO:
- Inline critical CSS only
- Place scripts at end of body or with defer
- Semantic HTML for better parsing
- <title> and <meta name="description">
- Structured data for SEO

Tools:
- Lighthouse, WebPageTest, PageSpeed Insights

------------------------------------------------------------

14. Reflow & Repaint
- Reflow (Layout): triggered when geometry/structure changes
  (size, position, font, margins, adding/removing DOM)
- Repaint: triggered when visual style changes only
  (color, background, visibility, shadows)

Performance Tips:
- Batch DOM updates
- Use classList instead of multiple inline style changes
- Use transform: translate() for animations (less reflow)
- Absolute/fixed elements reflow less
- Layout Thrashing: Multiple reads/writes to the DOM in loops → causes repeated reflows.
    Tip: batch reads/writes.
- Compositing: transform & opacity are GPU-accelerated → repaint-free animations.
    CSS Containment: contain: layout style can limit reflow scope.
- Font Loading: FOUT vs FOIT (Flash of Unstyled/Invisible Text).
- HTTP/2 Push & Resource Hints (preload, prefetch, preconnect) for critical assets.

------------------------------------------------------------

16. HTML5 APIs:
- Canvas, localStorage, sessionStorage
- Geolocation, Web Workers, WebSockets, Fetch API

------------------------------------------------------------

17. Iframes & Embeds:
- <iframe>, <embed>, <object>
- Use sandbox, loading="lazy" for security & performance

------------------------------------------------------------

18. HTML Entities:
&lt;, &gt;, &amp;, &quot;, &nbsp;

------------------------------------------------------------

19. Progressive Enhancement vs Graceful Degradation:
- PE: build from semantic HTML → CSS → JS
- GD: build advanced app but allow fallback

------------------------------------------------------------

20. Security:
- Escape user input
- target="_blank" → add rel="noopener noreferrer"
- Use CSP (Content Security Policy)

------------------------------------------------------------

21. Custom Data Attributes:
<button data-id="123" data-role="admin">Click</button>
JS: element.dataset.id

------------------------------------------------------------

22. Inline vs Block Elements:
- Block: div, p, section
- Inline: span, a, strong

------------------------------------------------------------

23. Deprecated Tags (avoid):
<font>, <center>, <marquee>, <b>, <i>

------------------------------------------------------------

24. Global Attributes
- id, class, style, title, lang, dir, hidden, data-*, tabindex, contenteditable

------------------------------------------------------------

25. Multimedia Enhancements
    <video> & <audio> controls, autoplay, loop, muted, preload
    <video src="video.mp4" controls autoplay loop muted></video>
    <audio src="audio.mp3" controls></audio>
    Subtitles / captions: <track kind="subtitles">
    Poster image for videos: <video poster="image.jpg">

------------------------------------------------------------

26. Responsive & Mobile HTML
    viewport meta tag is mandatory:
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    Use <picture> with <source> for responsive images:
    <picture>
      <source media="(max-width: 600px)" srcset="small.jpg">
      <img src="large.jpg" alt="Responsive image">
    </picture>

------------------------------------------------------------

27. Global Attributes
    id, class, style, title, lang, dir, hidden, data-*, tabindex, contenteditable


28. Intersection Observer:
    Purpose: Detect when an element enters/leaves viewport or a container.
      Key Points:
        root: container to observe (null = viewport)
        threshold: how much of element must be visible (0–1)
        rootMargin: margin around root
        Use for lazy loading, animations, infinite scroll, ad tracking
        Advantage: More performant than scroll events; avoids layout thrashing.

29. DOM: 
    DOM traversal 
    DOM creation 
    DOM manipulations
    Accessing element/node properties

30. Event Bubbling / Event delegation 
